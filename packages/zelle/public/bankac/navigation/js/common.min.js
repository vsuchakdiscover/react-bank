(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require("./util/polyfills");

require("./components/main-header.js");

require("./components/footer.js");

},{"./components/footer.js":2,"./components/main-header.js":3,"./util/polyfills":4}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Footer = function () {
  function Footer() {
    _classCallCheck(this, Footer);

    this.expandableLinks = Array.from(document.querySelectorAll(".main-footer__linkhdr--accordion"));
    this.addEvents();
  }

  _createClass(Footer, [{
    key: "toggleMenu",
    value: function toggleMenu() {
      var group = this.closest(".main-footer__linkgroup");
      if (this.getAttribute("aria-expanded") === "false") {
        group.classList.add("main-footer__linkgroup--open");
        this.setAttribute("aria-expanded", "true");
      } else {
        group.classList.remove("main-footer__linkgroup--open");
        this.setAttribute("aria-expanded", "false");
      }
    }
  }, {
    key: "addEvents",
    value: function addEvents() {
      var _this = this;

      this.expandableLinks.forEach(function (item) {
        return item.addEventListener("click", _this.toggleMenu);
      });
    }
  }]);

  return Footer;
}();

new Footer();

},{}],3:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var CLASSES = {
    MAIN_HEADER: "main-header",
    DEVICE_MENU: "device-menu",
    DEVICE_MENU_TEXT: "device-menu__text",
    NAV: "main-header__nav",
    PARENT_NAV_LIST: "main-header__parent-nav-list",
    LOGO: "main-header__logo",
    LAST_LOGIN: "main-header__last-login",
    PARENT_LINK: "main-header__nav-list-parent-link",
    MENU_LIST: "main-header__menu-nav-list",
    MENU_LINK: "main-header__menu-nav-link",
    LOGOUT: "main-header__log-out",
    EXPANDABLE_LINK: "main-header__nav-list-link--expandable",
    FLYOUT_LINK: "main-header__nav-list-parent-link--has-flyout",
    SUB_NAV_LINK: "main-header__sub-nav-link",
    TABBABLE_ITEM: "tabbable-item",
    ADDITIONAL_ACCOUNT_INFO: "main-header__additional-account-info",
    ADDITIONAL_ACCOUNT_BACK: "additional-back-btn",
    ACCOUNTS_LIST_LINK: "accounts-list__link",
    ACCOUNTS_ALL_ACCOUNTS: "accounts-list__all-accounts",
    ALL_ACCOUNTS_MOBILE: "main-header__account-info-all-accounts"
  };
  var CONFIG = {
    breakpoints: {
      sm: 320,
      md: 755,
      lg: 1024,
      xl: 1540
    }
  };

  var removeTargetFromArray = function removeTargetFromArray(array, target) {
    return array.filter(function (el) {
      return el != target;
    });
  };

  var MainHeader = function () {
    function MainHeader(mainHeader, deviceMenu, nav, parentNavList, menuList, additionalAccountInfo, additionalInfoBackBtn, lastLogin, mainNavItems, expandableLinks, flyoutLinks, menuLinks, childNavFocusableItems, allAccountsMobileBtn, config) {
      _classCallCheck(this, MainHeader);

      this.body = document.querySelector("body");
      this.mainHeader = mainHeader;
      this.deviceMenu = deviceMenu;
      this.nav = nav;
      this.parentNavList = parentNavList;
      this.menuList = menuList;
      this.additionalAccountInfo = additionalAccountInfo;
      this.additionalInfoBackBtn = additionalInfoBackBtn;
      this.lastLogin = lastLogin;
      this.mainNavItems = mainNavItems;
      this.expandableLinks = expandableLinks;
      this.flyoutLinks = flyoutLinks;
      this.activeFlyout = null;
      this.menuLinks = menuLinks;
      this.allAccountsMobileBtn = allAccountsMobileBtn;
      this.childNavFocusableItems = childNavFocusableItems;
      this.config = config;
      this.firstFocusableMainMenuEl = this.mainNavItems[0];
      this.lastFocusableMainMenuEl = this.mainNavItems[this.mainNavItems.length - 1];
      this.viewportWidth = window.innerWidth;
      this.viewportHeight = window.innerHeight;
      this.initEventListeners();
    }

    _createClass(MainHeader, [{
      key: "initEventListeners",
      value: function initEventListeners() {
        var _this = this;

        window.addEventListener("scroll", function (e) {
          return _this.windowScroll(e);
        });
        this.body.addEventListener("click", function (e) {
          return _this.bodyClick(e);
        });
        this.deviceMenu.on("click", function (e) {
          return _this.toggleDeviceMenu(e);
        });
        this.allAccountsMobileBtn.on("click", function (e) {
          return _this.toggleAllAccounts(e);
        });
        this.expandableLinks.forEach(function (link) {
          return link.addEventListener("click", function (e) {
            return _this.toggleExpandableLink(e);
          });
        });
        this.menuLinks.forEach(function (link) {
          return link.addEventListener("click", function (e) {
            return _this.toggleMenuFlyout(e);
          });
        });
        this.menuLinks.forEach(function (item) {
          return item.addEventListener("keydown", function (e) {
            return _this.flyoutKeypress(e);
          });
        });
        this.flyoutLinks.forEach(function (link) {
          return link.addEventListener("click", function (e) {
            return _this.toggleFlyout(e);
          });
        });
        this.flyoutLinks.forEach(function (item) {
          return item.addEventListener("keydown", function (e) {
            return _this.flyoutKeypress(e);
          });
        });
        this.mainNavItems.forEach(function (item) {
          return item.addEventListener("keydown", function (e) {
            return _this.mainNavKeyPress(e);
          });
        });
        this.childNavFocusableItems.forEach(function (link) {
          return link.addEventListener("keydown", function (e) {
            return _this.childNavKeypress(e);
          });
        });

        window.on("resize.main-header__nav", this.windowResize.bind(this));
      }
    }, {
      key: "windowScroll",
      value: function windowScroll(e) {
        var scrollY = window.scrollY;
        var headerHeight = this.mainHeader.offsetHeight;
        if (scrollY >= 60 && this.viewportWidth >= this.config.breakpoints.lg) {
          this.mainHeader.style.top = "-" + headerHeight + "px";
          if (this.activeFlyout !== null) {
            this.closeFlyout(this.activeFlyout);
          }
        } else {
          this.mainHeader.style.top = 0;
        }
      }
    }, {
      key: "bodyClick",
      value: function bodyClick(e) {
        var target = e.target;
        var isClickInside = this.parentNavList.contains(target) || this.menuList.contains(target);
        if (!isClickInside && this.activeFlyout !== null) {
          this.closeFlyout(this.activeFlyout);
        }
      }
    }, {
      key: "toggleFlyout",
      value: function toggleFlyout(e) {
        e.preventDefault();
        var targetLink = e.currentTarget;
        var parentListItem = targetLink.closest(".main-header__nav-list-item");
        var isOpen = parentListItem.classList.contains("main-header__nav-list-item--flyout-open");
        isOpen ? this.closeFlyout(targetLink) : this.openFlyout(targetLink);
      }
    }, {
      key: "openFlyout",
      value: function openFlyout(el) {
        if (this.activeFlyout !== null) {
          this.closeFlyout(this.activeFlyout);
        }
        this.activeFlyout = el;
        var parentListItem = el.closest(".main-header__nav-list-item");
        var childNav = parentListItem.querySelector(".main-header__child-navigation");
        parentListItem.classList.add("main-header__nav-list-item--flyout-open");
        childNav.classList.add("main-header__child-navigation--show");
      }
    }, {
      key: "closeFlyout",
      value: function closeFlyout(el) {
        var parentListItem = el.closest(".main-header__nav-list-item");
        var childNav = parentListItem.querySelector(".main-header__child-navigation");
        parentListItem.classList.remove("main-header__nav-list-item--flyout-open");
        childNav.classList.remove("main-header__child-navigation--show");
        this.activeFlyout = null;
      }
    }, {
      key: "toggleAllAccounts",
      value: function toggleAllAccounts(e) {
        e.preventDefault();
        var mobileAccountsList = document.querySelector(".mobile-accounts-list");
        var isShown = mobileAccountsList.classList.contains("show");
        if (!isShown) {
          this.showAllAccounts();
        } else {
          this.hideAllAccounts();
        }
      }
    }, {
      key: "showAllAccounts",
      value: function showAllAccounts() {
        var mobileAccountsList = document.querySelector(".mobile-accounts-list");
        var expandIcon = this.allAccountsMobileBtn.querySelector(".nav-icon");
        expandIcon.classList.add("expanded");
        mobileAccountsList.classList.add("show");
      }
    }, {
      key: "hideAllAccounts",
      value: function hideAllAccounts() {
        var mobileAccountsList = document.querySelector(".mobile-accounts-list");
        var expandIcon = this.allAccountsMobileBtn.querySelector(".nav-icon");
        expandIcon.classList.remove("expanded");
        mobileAccountsList.classList.remove("show");
      }
    }, {
      key: "toggleMenuFlyout",
      value: function toggleMenuFlyout(e) {
        if (this.viewportWidth >= this.config.breakpoints.lg) {
          e.preventDefault();
          var targetLink = e.currentTarget;
          var parentListItem = targetLink.closest(".main-header__nav-list-item");
          var isOpen = parentListItem.classList.contains("main-header__nav-list-item--flyout-open");
          isOpen ? this.closeFlyout(targetLink) : this.openFlyout(targetLink);
        }
      }
    }, {
      key: "setDeviceMenu",
      value: function setDeviceMenu() {
        var navWidth = this.nav.clientWidth;
        this.viewportWidth < this.config.breakpoints.lg ? this.nav.style.left = "-" + navWidth + "px" : this.nav.style.left = 0;
      }
    }, {
      key: "toggleDeviceMenu",
      value: function toggleDeviceMenu() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        e.preventDefault();
        var isMenuOpen = this.deviceMenu.classList.contains("device-menu--open");
        isMenuOpen ? this.closeDeviceMenu() : this.openDeviceMenu();
      }
    }, {
      key: "openDeviceMenu",
      value: function openDeviceMenu() {
        var windowHeight = window.innerHeight;
        var navHeight = windowHeight - this.mainHeader.clientHeight;
        this.deviceMenu.classList.add("device-menu--open");
        this.nav.classList.add("main-header__nav--open");
        this.body.style.position = "fixed";
        this.nav.style.visibility = "visible";
        this.nav.style.height = navHeight + "px";
        this.nav.style.left = 0;
      }
    }, {
      key: "closeDeviceMenu",
      value: function closeDeviceMenu() {
        var _this2 = this;

        var navWidth = this.nav.clientWidth;
        this.deviceMenu.classList.remove("device-menu--open");
        this.nav.classList.remove("main-header__nav--open");
        this.body.style.position = "static";
        this.nav.style.left = "-" + navWidth + "px";
        this.hideAllAccounts();
        setTimeout(function () {
          _this2.nav.style.visibility = "hidden";
          _this2.nav.style.height = "60px";
        }, 550);
      }
    }, {
      key: "closeDeviceMenuOnResize",
      value: function closeDeviceMenuOnResize() {
        this.deviceMenu.classList.remove("device-menu--open");
        this.nav.classList.remove("main-header__nav--open");
        this.body.style.position = "static";
        this.nav.style.height = "60px";
        this.hideAllAccounts();
      }
    }, {
      key: "toggleExpandableLink",
      value: function toggleExpandableLink(e) {
        e.preventDefault();
        var targetLink = e.currentTarget;
        var otherExpandableLinks = removeTargetFromArray(this.expandableLinks, targetLink);
        var parentContainer = targetLink.closest(".main-header__child-navigation-item");
        var ariaExpanded = Boolean(targetLink.getAttribute("aria-expanded") === "false");
        var subNav = parentContainer.querySelector(".main-header__sub-nav-list");
        var expandIcon = targetLink.querySelector(".nav-icon");
        otherExpandableLinks.forEach.call(otherExpandableLinks, this.closeExpandableLink);
        targetLink.classList.toggle("main-header__nav-list-link--open");
        subNav.classList.toggle("main-header__sub-nav-list--show");
        expandIcon.classList.toggle("expanded");
        ariaExpanded ? targetLink.setAttribute("aria-expanded", true) : targetLink.setAttribute("aria-expanded", false);
      }
    }, {
      key: "closeExpandableLink",
      value: function closeExpandableLink(link) {
        var parentContainer = link.closest(".main-header__child-navigation-item");
        var subNav = parentContainer.querySelector(".main-header__sub-nav-list");
        var expandIcon = link.querySelector(".nav-icon");
        link.classList.remove("main-header__nav-list-link--open");
        subNav.classList.remove("main-header__sub-nav-list--show");
        expandIcon.classList.remove("expanded");
      }
    }, {
      key: "childNavKeypress",
      value: function childNavKeypress(e) {
        e.preventDefault();
        var targetElement = e.target;
        var shiftKeyPress = e.shiftKey;
        var keyCode = e.which;
        var childNav = targetElement.closest(".main-header__child-navigation");
        var focusableEls = Array.from(childNav.querySelectorAll(".tabbable-item"));
        var indexOfActiveElement = focusableEls.indexOf(targetElement);
        var firstFocusableEl = focusableEls[0];
        var lastFocusableEl = focusableEls[focusableEls.length - 1];
        var parentNavItem = targetElement.closest(".main-header__nav-list-item");
        var parentMenuBtn = parentNavItem.querySelector(".main-header__nav-list-parent-link--has-flyout, .main-header__menu-nav-link");
        switch (keyCode) {
          case 27:
            this.closeFlyout(parentMenuBtn);
            parentMenuBtn.focus();
            break;
          case 38:
            if (document.activeElement === firstFocusableEl) {
              this.closeFlyout(parentMenuBtn);
              parentMenuBtn.focus();
            } else {
              focusableEls[indexOfActiveElement - 1].focus();
            }
            break;
          case 40:
            if (document.activeElement === lastFocusableEl) {
              firstFocusableEl.focus();
            } else {
              focusableEls[indexOfActiveElement + 1].focus();
            }
            break;
          case 39:
            this.goToNextMainNavItem(parentMenuBtn);
            break;
          case 9:
            shiftKeyPress ? this.goToPreviousMainNavItem(parentMenuBtn) : this.goToNextMainNavItem(parentMenuBtn);
            break;
          case 37:
            this.goToPreviousMainNavItem(parentMenuBtn);
            break;
          default:
            break;
        }
      }
    }, {
      key: "goToNextMainNavItem",
      value: function goToNextMainNavItem(parentMenuBtn) {
        var indexOfParent = this.mainNavItems.indexOf(parentMenuBtn);
        var nextElement = this.mainNavItems[indexOfParent + 1];
        this.closeFlyout(parentMenuBtn);
        nextElement.focus();
      }
    }, {
      key: "goToPreviousMainNavItem",
      value: function goToPreviousMainNavItem(parentMenuBtn) {
        var indexOfParent = this.mainNavItems.indexOf(parentMenuBtn);
        var nextElement = this.mainNavItems[indexOfParent - 1];
        this.closeFlyout(parentMenuBtn);
        nextElement.focus();
      }
    }, {
      key: "flyoutKeypress",
      value: function flyoutKeypress(e) {
        var targetElement = e.target;
        var keyCode = e.which;
        switch (keyCode) {
          case 38:
            this.arrowUpPressed(targetElement);
            break;
          case 40:
            e.preventDefault();
            this.handleMenuToggle(targetElement);
            break;
          case 13:
          case 32:
            e.preventDefault();
            this.handleMenuToggle(targetElement);
            break;
          default:
            break;
        }
      }
    }, {
      key: "mainNavKeyPress",
      value: function mainNavKeyPress(e) {
        var targetElement = e.target;
        var keyCode = e.which;
        switch (keyCode) {
          case 39:
            this.arrowRightPressed(targetElement);
            break;
          case 37:
            this.arrowLeftPressed(targetElement);
            break;
          case 35:
            this.lastFocusableMainMenuEl.focus();
            break;
          case 36:
            this.firstFocusableMainMenuEl.focus();
            break;
          default:
            break;
        }
      }
    }, {
      key: "arrowUpPressed",
      value: function arrowUpPressed(el) {
        el.click();
        var parentListItem = el.closest(".main-header__nav-list-item");
        var childNav = parentListItem.querySelector(".main-header__child-navigation");
        this.handleSubMenuFocus(childNav, false);
      }
    }, {
      key: "handleMenuToggle",
      value: function handleMenuToggle(el) {
        el.click();
        var parentListItem = el.closest(".main-header__nav-list-item");
        var childNav = parentListItem.querySelector(".main-header__child-navigation");
        this.handleSubMenuFocus(childNav);
      }
    }, {
      key: "handleSubMenuFocus",
      value: function handleSubMenuFocus(focusContainer) {
        var focusFirstElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var focusableEls = Array.from(focusContainer.querySelectorAll(".tabbable-item"));
        var firstFocusableEl = focusableEls[0];
        var lastFocusableEl = focusableEls[focusableEls.length - 1];
        focusFirstElement ? firstFocusableEl.focus() : lastFocusableEl.focus();
      }
    }, {
      key: "arrowLeftPressed",
      value: function arrowLeftPressed(el) {
        var indexOfActiveElement = this.mainNavItems.indexOf(el);
        if (document.activeElement === this.firstFocusableMainMenuEl) {
          this.lastFocusableMainMenuEl.focus();
        } else {
          this.mainNavItems[indexOfActiveElement - 1].focus();
        }
      }
    }, {
      key: "arrowRightPressed",
      value: function arrowRightPressed(el) {
        var indexOfActiveElement = this.mainNavItems.indexOf(el);
        if (document.activeElement === this.lastFocusableMainMenuEl) {
          this.firstFocusableMainMenuEl.focus();
        } else {
          this.mainNavItems[indexOfActiveElement + 1].focus();
        }
      }
    }, {
      key: "windowResize",
      value: function windowResize(e) {
        this.viewportWidth = window.innerWidth;
        this.viewportHeight = window.innerHeight;
        if (this.nav.classList.contains("main-header__nav--open")) {
          this.closeDeviceMenuOnResize();
        }
        this.nav.style.visibility = this.viewportWidth >= this.config.breakpoints.lg ? "visible" : "hidden";
        this.setDeviceMenu();
        this.expandableLinks.forEach.call(this.expandableLinks, this.closeExpandableLink);
        if (this.activeFlyout !== null) {
          this.closeFlyout(this.activeFlyout);
        }
      }
    }]);

    return MainHeader;
  }();

  window.mainHeader = new MainHeader(document.querySelector("." + CLASSES.MAIN_HEADER), document.querySelector("." + CLASSES.DEVICE_MENU), document.querySelector("." + CLASSES.NAV), document.querySelector("." + CLASSES.PARENT_NAV_LIST), document.querySelector("." + CLASSES.MENU_LIST), document.querySelector("." + CLASSES.ADDITIONAL_ACCOUNT_INFO), document.querySelector("." + CLASSES.ADDITIONAL_ACCOUNT_BACK), document.querySelector("." + CLASSES.LAST_LOGIN), Array.from(document.querySelectorAll("." + CLASSES.LOGO + ", ." + CLASSES.PARENT_LINK + ", ." + CLASSES.MENU_LINK + ", ." + CLASSES.LOGOUT)), Array.from(document.querySelectorAll("." + CLASSES.EXPANDABLE_LINK)), Array.from(document.querySelectorAll("." + CLASSES.FLYOUT_LINK)), Array.from(document.querySelectorAll("." + CLASSES.MENU_LINK)), Array.from(document.querySelectorAll("." + CLASSES.ACCOUNTS_ALL_ACCOUNTS + ", ." + CLASSES.ACCOUNTS_LIST_LINK + ", ." + CLASSES.SUB_NAV_LINK + ", ." + CLASSES.TABBABLE_ITEM + ", ." + CLASSES.EXPANDABLE_LINK)), document.querySelector("." + CLASSES.ALL_ACCOUNTS_MOBILE), CONFIG);
})();

},{}],4:[function(require,module,exports){
"use strict";

require("./polyfills/NodeList.forEach");

require("./polyfills/Array.from.js");

require("./polyfills/Array.find.js");

require("./polyfills/Element.closest");

require("./polyfills/Element.dataset.js");

require("./polyfills/Element.focus");

require("./polyfills/Element.index");

require("./polyfills/Element.on.off");

require("./polyfills/Element.scrollIntoView.js");

require("./polyfills/Element.slideDown.slideUp");

require("./polyfills/Element.trigger");

require("./polyfills/event.focusin.js");

require("./polyfills/svg.js");

require("./polyfills/fetch.umd.js");

},{"./polyfills/Array.find.js":5,"./polyfills/Array.from.js":6,"./polyfills/Element.closest":7,"./polyfills/Element.dataset.js":8,"./polyfills/Element.focus":9,"./polyfills/Element.index":10,"./polyfills/Element.on.off":11,"./polyfills/Element.scrollIntoView.js":12,"./polyfills/Element.slideDown.slideUp":13,"./polyfills/Element.trigger":14,"./polyfills/NodeList.forEach":15,"./polyfills/event.focusin.js":16,"./polyfills/fetch.umd.js":17,"./polyfills/svg.js":18}],5:[function(require,module,exports){
'use strict';

Array.prototype.find = Array.prototype.find || function (callback) {
  if (this === null) {
    throw new TypeError('Array.prototype.find called on null or undefined');
  } else if (typeof callback !== 'function') {
    throw new TypeError('callback must be a function');
  }
  var list = Object(this);
  // Makes sures is always has an positive integer as length.
  var length = list.length >>> 0;
  var thisArg = arguments[1];
  for (var i = 0; i < length; i++) {
    var element = list[i];
    if (callback.call(thisArg, element, i, list)) {
      return element;
    }
  }
};

},{}],6:[function(require,module,exports){
'use strict';

if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;
    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function toInteger(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike /*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError("Array.from requires an array-like object - not null or undefined");
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }();
}

},{}],7:[function(require,module,exports){
"use strict";

if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

if (!Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var el = this;
    if (!document.documentElement.contains(el)) return null;
    do {
      if (el.matches(s)) return el;
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);
    return null;
  };
}

},{}],8:[function(require,module,exports){
'use strict';

/*
 * @preserve dataset polyfill for IE < 11. See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset and http://caniuse.com/#search=dataset
 *
 * @author ShirtlessKirk copyright 2015
 * @license WTFPL (http://www.wtfpl.net/txt/copying)
 */
/*global define: false, module: false */
/*jslint nomen: true, regexp: true, unparam: true */
(function datasetModule(global, definition) {
    // non-exporting module magic dance
    'use strict';

    var amd = 'amd',
        exports = 'exports'; // keeps the method names for CommonJS / AMD from being compiled to single character variable

    if (typeof define === 'function' && define[amd]) {
        define(function definer() {
            return definition(global);
        });
    } else if (typeof module === 'function' && module[exports]) {
        module[exports] = definition(global);
    } else {
        definition(global);
    }
})(undefined, function datasetPolyfill(global) {
    'use strict';

    var attribute,
        attributes,
        counter,
        dash,
        dataRegEx,
        hasEventListener,
        length,
        match,
        mutationSupport,
        test = document.createElement('_'),
        DOMAttrModified = 'DOMAttrModified';

    function clearDataset(event) {
        delete event.target._datasetCache;
    }

    function toCamelCase(string) {
        return string.replace(dash, function (m, letter) {
            return letter.toUpperCase();
        });
    }

    function getDataset() {
        var dataset = {};

        attributes = this.attributes;
        for (counter = 0, length = attributes.length; counter < length; counter += 1) {
            attribute = attributes[counter];
            match = attribute.name.match(dataRegEx);
            if (match) {
                dataset[toCamelCase(match[1])] = attribute.value;
            }
        }

        return dataset;
    }

    function mutation() {
        if (hasEventListener) {
            test.removeEventListener(DOMAttrModified, mutation, false);
        } else {
            test.detachEvent('on' + DOMAttrModified, mutation);
        }

        mutationSupport = true;
    }

    if (test.dataset !== undefined) {
        return;
    }

    dash = /\-([a-z])/ig;
    dataRegEx = /^data\-(.+)/;
    hasEventListener = !!document.addEventListener;
    mutationSupport = false;

    if (hasEventListener) {
        test.addEventListener(DOMAttrModified, mutation, false);
    } else {
        test.attachEvent('on' + DOMAttrModified, mutation);
    }

    // trigger event (if supported)
    test.setAttribute('foo', 'bar');

    Object.defineProperty(Element.prototype, 'dataset', {
        get: mutationSupport ? function get() {
            if (!this._datasetCache) {
                this._datasetCache = getDataset.call(this);
            }

            return this._datasetCache;
        } : getDataset
    });

    if (mutationSupport && hasEventListener) {
        // < IE9 supports neither
        document.addEventListener(DOMAttrModified, clearDataset, false);
    }
});

},{}],9:[function(require,module,exports){
'use strict';

require('./Element.on.off');

require('./Element.trigger');

/**
 * Safari does not like to fire the focus event when a label is
 * clicked on like other browsers. This polyfill will listen for
 * the label click event, then trigger a focus on the input if
 * the element doesn't already have focus.
 */
document.querySelectorAll('label[for]').forEach(function (label) {
  var id = label.getAttribute('for');
  var input = document.querySelector('#' + id);

  if (!input) {
    return;
  }

  label.on('click', function (e) {
    // Use set timeout to clear the stack and make sure the active element
    // is not the one we're about to give focus to, as we don't want a
    // double focus event to be triggered.
    setTimeout(function () {
      if (input === document.activeElement) {
        return;
      }
      input.trigger('focus');
    });
  });
});

},{"./Element.on.off":11,"./Element.trigger":14}],10:[function(require,module,exports){
"use strict";

function indexFromParent() {
  var children = this.parentNode.childNodes;
  var num = 0;
  for (var i = 0; i < children.length; i++) {
    if (children[i] == this) return num;
    if (children[i].nodeType == 1) num++;
  }
  return -1;
}

Element.prototype.index = indexFromParent;

},{}],11:[function(require,module,exports){
'use strict';

//https://gist.github.com/yairEO/cb60592476a4204b27e83048949dbb45

var events = {
    on: function on(event, cb, opts) {
        if (!this.namespaces) // save the namespaces on the DOM element itself
            this.namespaces = {};

        this.namespaces[event] = cb;
        var options = opts || false;
        this.addEventListener(event.split('.')[0], cb, options);
        return this;
    },
    off: function off(event) {
        if (!this.namespaces) // save the namespaces on the DOM element itself
            this.namespaces = {};
        this.removeEventListener(event.split('.')[0], this.namespaces[event]);
        delete this.namespaces[event];
        return this;
    }
};

// Extend the DOM with these above custom methods
window.on = document.on = Element.prototype.on = events.on;
window.off = document.off = Element.prototype.off = events.off;

},{}],12:[function(require,module,exports){
"use strict";

// Polyfill to improve Element.scrollIntoView()

var scrollIntoView = function () {

  // Original implementation is used for backwards compatibility
  var scrollIntoView_original = Element.prototype.scrollIntoView;

  function scrollIntoView(options) {

    // Use traditional scrollIntoView when traditional argument is given.
    if (options === undefined || options === true || options === false) {
      scrollIntoView_original.apply(this, arguments);
      return;
    }

    var window = this.ownerDocument.defaultView;

    // Read options.
    if (options === undefined) options = {};
    if (options.center === true) {
      options.vertical = 0.5;
      options.horizontal = 0.5;
    } else {
      if (options.block === "start") options.vertical = 0.0;else if (options.block === "end") options.vertical = 0.0;else if (options.vertical === undefined) options.vertical = 0.0;

      if (options.horizontal === undefined) options.horizontal = 0.0;
    }

    // Fetch positional information.
    var rect = this.getBoundingClientRect();

    // Determine location to scroll to.
    var targetY = window.scrollY + rect.top - (window.innerHeight - this.offsetHeight) * options.vertical;
    var targetX = window.scrollX + rect.left - (window.innerWidth - this.offsetWidth) * options.horizontal;

    // Scroll.
    window.scroll({
      top: targetY,
      left: targetX,
      behavior: "smooth"
    });

    // If window is inside a frame, center that frame in the parent window. Recursively.
    if (window.parent !== window) {
      // We are inside a scrollable element.
      var frame = window.frameElement;
      scrollIntoView.call(frame, options);
    }
  }

  // Add a method that replaces the browser's implementation.
  function installPolyfill() {
    Element.prototype.scrollIntoView = scrollIntoView;
  }
  scrollIntoView.installPolyfill = installPolyfill;

  // Instantly install
  // TODO: Migrate all components so they don't instantly install on import
  scrollIntoView.installPolyfill();

  return scrollIntoView;
}();

// CommonJS/Node support.
if (typeof module !== 'undefined' && module.exports) {
  module.exports = scrollIntoView;
}

},{}],13:[function(require,module,exports){
'use strict';

function whichTransitionEvent() {
  var t;
  var el = document.createElement('fakeelement');
  var transitions = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'MSTransition': 'msTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };

  for (t in transitions) {
    if (el.style[t] !== undefined) {
      return transitions[t];
    }
  }
}

/**
 * Slide an element up like jQuery's slideDown function using CSS3 transitions.
 * @see https://gist.github.com/ludder/4226288
 * @param  {timing|callback}   Timing string or callback function when done
 * @param  {func}              Callback function when done
 * @return {void}
 */
function slideDown() {
  var _this = this;

  var timing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '300ms ease';
  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

  if (typeof timing === 'function') {
    cb = timing;
    timing = '250ms ease';
  }

  if (this.offsetHeight) {
    this.setAttribute('data-original-height', this.offsetHeight);
    this.style.height = 'auto';
  }

  // Get element height
  this.style.webkitTransition = 'none';
  this.style.transition = 'none';
  this.style.visibility = 'hidden';
  this.style.maxHeight = 'none';
  this.style.display = 'block';
  var height = this.offsetHeight + this.style.paddingBottom + this.style.paddingTop + 'px';
  this.style.removeProperty('visibility');
  this.style.maxHeight = 0;
  this.style.overflow = 'hidden';

  // Begin transition
  this.style.webkitTransition = 'max-height ' + timing + ', opacity ' + timing + ' 200ms';
  this.style.transition = 'max-height ' + timing + ', opacity ' + timing + ' 200ms';
  var endSlideDown = function endSlideDown() {
    _this.style.removeProperty('-webkit-transition');
    _this.style.removeProperty('transition');
    _this.style.removeProperty('max-height');
    _this.style.removeProperty('overflow');
    _this.removeEventListener(whichTransitionEvent(), endSlideDown);
    cb.call();
  };
  // Stack issue, use setTimeout hack to move to bottom of stack
  setTimeout(function () {
    requestAnimationFrame(function () {
      _this.addEventListener(whichTransitionEvent(), endSlideDown);
      _this.style.maxHeight = height;
      _this.style.opacity = '1';
    });
  });

  return this;
}

/**
 * Slide an element up like jQuery's slideUp function using CSS3 transitions.
 * @see https://gist.github.com/ludder/4226288
 * @param  {timing|callback}   Timing string or callback function when done
 * @param  {func}              Callback function when done
 * @return {void}
 */
function slideUp() {
  var _this2 = this;

  var timing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '300ms ease';
  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

  if (typeof timing === 'function') {
    cb = timing;
    timing = '300ms ease';
  }

  var endHeight = this.getAttribute('data-original-height') ? parseInt(this.getAttribute('data-original-height')) : 0;

  this.style.webkitTransition = 'none';
  this.style.transition = 'none';
  var height = this.offsetHeight + this.style.paddingBottom + this.style.paddingTop + 'px';
  this.style.maxHeight = height;
  this.style.overflow = 'hidden';

  // Begin transition
  this.style.webkitTransition = 'max-height ' + timing + ' 150ms, opacity ' + timing;
  this.style.transition = 'max-height ' + timing + ' 150ms, opacity ' + timing;
  var endSlideUp = function endSlideUp() {
    _this2.style.removeProperty('-webkit-transition');
    _this2.style.removeProperty('transition');
    if (!_this2.getAttribute('data-original-height')) {
      _this2.style.removeProperty('max-height');
      _this2.style.display = 'none';
    }
    _this2.removeEventListener(whichTransitionEvent(), endSlideUp);
    cb.call();
  };
  // Stack issue, use setTimeout hack to move to bottom of stack
  setTimeout(function () {
    requestAnimationFrame(function () {
      _this2.addEventListener(whichTransitionEvent(), endSlideUp);
      _this2.style.maxHeight = endHeight + 'px';
      _this2.style.opacity = endHeight;
    });
  });

  return this;
}

Element.prototype.slideDown = slideDown;
Element.prototype.slideUp = slideUp;

},{}],14:[function(require,module,exports){
'use strict';

function triggerEvent(event) {
  if ('createEvent' in document) {
    var evt = document.createEvent('HTMLEvents');
    evt.initEvent(event, false, true);
    this.dispatchEvent(evt);
  } else {
    this.fireEvent('on' + event);
  }
  return this;
}
window.trigger = document.trigger = Element.prototype.trigger = triggerEvent;

},{}],15:[function(require,module,exports){
"use strict";

// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach
if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    thisArg = thisArg || window;
    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}

},{}],16:[function(require,module,exports){
'use strict';

/* Copyright (c) 2016 Tobias Buschor https://goo.gl/gl0mbf | MIT License https://goo.gl/HgajeK */
/* focusin/out event polyfill (firefox) */
!function () {
    var w = window,
        d = w.document;

    if (w.onfocusin === undefined) {
        d.addEventListener('focus', addPolyfill, true);
        d.addEventListener('blur', addPolyfill, true);
        d.addEventListener('focusin', removePolyfill, true);
        d.addEventListener('focusout', removePolyfill, true);
    }
    function addPolyfill(e) {
        var type = e.type === 'focus' ? 'focusin' : 'focusout';
        var event = new CustomEvent(type, { bubbles: true, cancelable: false });
        event.c1Generated = true;
        e.target.dispatchEvent(event);
    }
    function removePolyfill(e) {
        if (!e.c1Generated) {
            // focus after focusin, so chrome will the first time trigger tow times focusin
            d.removeEventListener('focus', addPolyfill, true);
            d.removeEventListener('blur', addPolyfill, true);
            d.removeEventListener('focusin', removePolyfill, true);
            d.removeEventListener('focusout', removePolyfill, true);
        }
        setTimeout(function () {
            d.removeEventListener('focusin', removePolyfill, true);
            d.removeEventListener('focusout', removePolyfill, true);
        });
    }
}();

},{}],17:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global.WHATWGFetch = {});
})(undefined, function (exports) {
  "use strict";

  var support = {
    searchParams: "URLSearchParams" in self,
    iterable: "Symbol" in self && "iterator" in Symbol,
    blob: "FileReader" in self && "Blob" in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: "FormData" in self,
    arrayBuffer: "ArrayBuffer" in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
  }

  if (support.arrayBuffer) {
    var viewClasses = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"];

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== "string") {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError("Invalid character in header field name");
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== "string") {
      value = String(value);
    }
    return value;
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function (header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ", " + value : value;
  };

  Headers.prototype["delete"] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null;
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError("Already read"));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join("");
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = "";
      } else if (typeof body === "string") {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get("content-type")) {
        if (typeof body === "string") {
          this.headers.set("content-type", "text/plain;charset=UTF-8");
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set("content-type", this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error("could not read FormData body as blob");
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as text");
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError("Already read");
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || "same-origin";
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || "GET");
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === "GET" || this.method === "HEAD") && body) {
      throw new TypeError("Body not allowed for GET or HEAD requests");
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split("&").forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split("=");
        var name = split.shift().replace(/\+/g, " ");
        var value = split.join("=").replace(/\+/g, " ");
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
    preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
      var parts = line.split(":");
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(":").trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = "default";
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = "statusText" in options ? options.statusText : "OK";
    this.headers = new Headers(options.headers);
    this.url = options.url || "";
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: "" });
    response.type = "error";
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError("Invalid status code");
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function (message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException("Aborted", "AbortError"));
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || "")
        };
        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
        var body = "response" in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError("Network request failed"));
      };

      xhr.ontimeout = function () {
        reject(new TypeError("Network request failed"));
      };

      xhr.onabort = function () {
        reject(new exports.DOMException("Aborted", "AbortError"));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === "include") {
        xhr.withCredentials = true;
      } else if (request.credentials === "omit") {
        xhr.withCredentials = false;
      }

      if ("responseType" in xhr && support.blob) {
        xhr.responseType = "blob";
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener("abort", abortXhr);

        xhr.onreadystatechange = function () {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener("abort", abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
    });
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, "__esModule", { value: true });
});

},{}],18:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SVG = function () {
  function SVG() {
    _classCallCheck(this, SVG);

    this.checkmark = document.querySelector('.checkmark');
    if (this.checkmark) {
      var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
      var fireFoxAgent = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
      var fireFoxVersion = fireFoxAgent ? parseInt(fireFoxAgent[1]) : 0;
      var webgl = null;
      if (fireFoxVersion) {
        webgl = WebGL2RenderingContext;
      }
      var lowFirefox = fireFoxVersion < 51 && webgl;
      if (!isIE11 || !lowFirefox) {
        this.animateSVG();
      }
    }
  }

  _createClass(SVG, [{
    key: 'animateSVG',
    value: function animateSVG() {

      this.checkmark.classList.add('checkmark--animated');
      this.checkmark.querySelector('.checkmark__circle').classList.add('checkmark__circle--animated');
      this.checkmark.querySelector('.checkmark__check').classList.add('checkmark__check--animated');
    }
  }, {
    key: 'paintSVG',
    value: function paintSVG() {
      this.checkmark.classList.add('checkmark--static');
      this.checkmark.querySelector('.checkmark__circle').classList.add('checkmark__circle--static');
      this.checkmark.querySelector('.checkmark__check').classList.add('checkmark__check--static');
    }
  }]);

  return SVG;
}();

new SVG();

},{}]},{},[1]);
